datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String      @unique
  experience    Int         @default(0)
  password      String?
  userVerses    UserVerse[]
  verseSets     VerseSet[]
  emailVerified DateTime?   @map("email_verified")
  image         String?
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  role          UserRole    @default(USER)
  accounts      Account[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model UserVerse {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  book             String
  chapter          Int
  startingVerse    Int
  endingVerse      Int?
  translation      String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userVerseReviews UserVerseReview[]
  VerseSetVerse    VerseSetVerse[]

  @@map("user_verses")
}

model UserVerseReview {
  id              Int       @id @default(autoincrement())
  userVerse       UserVerse @relation(fields: [userVerseId], references: [id])
  userVerseId     Int
  reviewedAt      DateTime
  difficulty      Int
  accuracy        Int
  detailedResults Json
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("user_verse_reviews")
}

model VerseSet {
  id        String          @id @default(cuid())
  name      String
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  verses    VerseSetVerse[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@map("verse_sets")
}

model VerseSetVerse {
  id          Int       @id @default(autoincrement())
  verseSet    VerseSet  @relation(fields: [verseSetId], references: [id])
  verseSetId  String
  userVerse   UserVerse @relation(fields: [userVerseId], references: [id])
  userVerseId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("verse_set_verses")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  token      String   @unique
  identifier String
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@unique([identifier, token])
  @@map("verification_requests")
}
