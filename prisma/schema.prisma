datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  name          String      @unique
  experience    Int         @default(0)
  password      String
  userVerses    UserVerse[]
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  role          UserRole    @default(USER)
  accounts      Account[]

  @@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@map("accounts")
}

model UserVerse {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  book          String
  chapter       Int
  startingVerse Int
  endingVerse   Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("userVerses")
}

model UserVerseReview {
  id              Int      @id @default(autoincrement())
  userVerseId     Int
  reviewedAt      DateTime
  difficulty      Int
  accuracy        Int
  detailedResults Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("userVerseReviews")
}

model Collection {
  id               String            @id @default(cuid())
  name             String
  collectionVerses CollectionVerse[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("collections")
}

model UserCollection {
  id           Int      @id @default(autoincrement())
  userId       Int
  collectionId Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("userCollections")
}

model CollectionVerse {
  id           Int        @id @default(autoincrement())
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  book         String
  chapter      Int
  verse        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("collectionVerses")
}
